
import UIKit

class DegreeViewController: UIViewController {

    let sphereView = SphereView()
    let lastSpere = LastSphereView()
    let sectorView = SectorView()
    let degr90 = _0DegrView()
    let rotateView = Rotate90DegrView()
    let scaledView = ScaledView()
    let oneDegreeView = DegreeView()
    let minutesView = MinuteInDegreeView()
    let topDegreeMin = TopDegreeToMinuteView()
    let symbolDescr = SymbolDescribeView()
    
    let nextButton = UIButton()
    let textLabel = UILabel()
    var viewArray = [UIView]()
    var currentView = UIView()
    var numberView = 0
    
    let angleLabel = UILabel()
    let distLabel = UILabel()
    let razrLabel = UILabel()
    let helpAngleViewLeft = UIView()
    let helpAngleViewBottom = UIView()
    let helpRazrView = UIView()
    
    var textArray = [String]()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        self.view.backgroundColor = #colorLiteral(red: 1, green: 1, blue: 1, alpha: 1)
        
        
        viewArray = [lastSpere, sphereView, sectorView, degr90, rotateView, scaledView, oneDegreeView, minutesView, topDegreeMin, symbolDescr]
        currentView = viewArray[numberView]
        
        textArray = ["–ò–∑ —Ü–µ–Ω—Ç—Ä–∞ —Å—Ñ–µ—Ä—ã —É–≥–æ–ª –æ–±–∑–æ—Ä–∞ –≤ –ª—é–±–æ–π –ø–ª–æ—Å–∫–æ—Å—Ç–∏ —Ä–∞–≤–µ–Ω 360¬∞",
                     "–í—ã–¥–µ–ª–∏–º 1/8 —á–∞—Å—Ç—å —Å—Ñ–µ—Ä—ã",
                     "–û—Å—Ç–∞–≤–∏–º —Ç–æ–ª—å–∫–æ –≤—ã–¥–µ–ª–µ–Ω—É—é –æ–±–ª–∞—Å—Ç—å",
                     "–û—Å—Ç–∞–≤–∏–º –≤—ã–¥–µ–ª–µ–Ω—É—é –æ–±–ª–∞—Å—Ç—å —Ç–æ–ª—å–∫–æ –≤ –æ–¥–Ω–æ–π –ø–ª–æ—Å–∫–æ—Å—Ç–∏. –£–≥–æ–ª –º–µ–∂–¥—É –æ—Å—è–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ä–∞–≤–µ–Ω 90¬∞",
                     "–ü–æ–≤–µ—Ä–Ω–µ–º –≤–ª–µ–≤–æ –Ω–∞ 45¬∞",
                     "–ù–µ–º–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–∏–º –∏ —Ä–∞–∑–¥–µ–ª–∏–º –Ω–∞ 90 —Ä–∞–≤–Ω—ã—Ö —á–∞—Å—Ç–µ–π. –î–≤–µ –ª—é–±—ã–µ —Å–æ—Å–µ–¥–Ω–∏–∏ –ª–∏–Ω–∏–∏ –æ–±—Ä–∞–∑—É—é—Ç —É–≥–æ–ª —Ä–∞–≤–Ω—ã–π 1 –≥—Ä–∞–¥—É—Å—É (1¬∞)",
                     "–û—Å—Ç–∞–≤–∏–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —É–≥–æ–ª –∏ –Ω–µ–º–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–∏–º. ",
                     "–ö–∞–∫ –≤–∏–¥–Ω–æ, –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç –≤–µ—Ä—à–∏–Ω—ã —É–≥–ª–∞, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –ª–∏–Ω–∏—è–º–∏, –æ–±—Ä–∞–∑—É—é—â–∏–º–∏ —É–≥–æ–ª, —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è",
                     "–î–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏ –æ—Ç–¥–∞–ª–∏–º—Å—è –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –≤–µ—Ä—à–∏–Ω—ã —É–≥–ª–∞ –∏ —Ä–∞–∑–¥–µ–ª–∏–º 1¬∞ –Ω–∞ 60 —Ä–∞–≤–Ω—ã—Ö —á–∞—Å—Ç–µ–π, –∫–∞–∂–¥–∞—è –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞–≤–Ω–∞ 1 —É–≥–ª–æ–≤–æ–π –º–∏–Ω—É—Ç–µ(1')",
                     "–†–∞–∑–º–µ—Ä —Å–∏–º–≤–æ–ª–∞ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ —Ä–∞–∑—Ä—ã–≤ —Å–∏–º–≤–æ–ª–∞ —Å–æ—Å—Ç–∞–≤–ª—è–ª 1 —É–≥–ª–æ–≤—É—é –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—Å—Ç—Ä–æ—Ç–µ –∑—Ä–µ–Ω–∏—è —Ä–∞–≤–Ω–æ–π 1"]
        textLabel.text = textArray[numberView]
        
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super .viewWillAppear(false)
        addSphere()
        addNextButton()
        addLabel()
    }
    
    func addSphere() {
        view.addSubview(currentView)
        currentView.translatesAutoresizingMaskIntoConstraints = false
        currentView.centerXAnchor.constraint(equalTo: view.centerXAnchor).isActive = true
        currentView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor).isActive = true
        currentView.widthAnchor.constraint(equalTo: view.widthAnchor).isActive = true
        currentView.heightAnchor.constraint(equalTo: view.widthAnchor).isActive = true
        
        currentView.backgroundColor = .clear
    }
    
    func addLabel() {
        view.addSubview(textLabel)
        textLabel.translatesAutoresizingMaskIntoConstraints = false
        textLabel.centerXAnchor.constraint(equalTo: view.centerXAnchor).isActive = true
        textLabel.topAnchor.constraint(equalTo: currentView.bottomAnchor).isActive = true
        textLabel.widthAnchor.constraint(equalTo: view.widthAnchor, multiplier: 95/100).isActive = true
        textLabel.bottomAnchor.constraint(equalTo: nextButton.topAnchor).isActive = true
        
        textLabel.backgroundColor = .clear
        textLabel.numberOfLines = 0
        textLabel.textAlignment = .justified
    }

    func addNextButton() {
        self.view.addSubview(nextButton)
        nextButton.translatesAutoresizingMaskIntoConstraints = false
        nextButton.centerXAnchor.constraint(equalTo: view.centerXAnchor).isActive = true
        nextButton.widthAnchor.constraint(equalTo: view.widthAnchor, multiplier: 1/2).isActive = true
        nextButton.heightAnchor.constraint(equalTo: view.heightAnchor, multiplier: 1/20).isActive = true
        nextButton.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor, constant: -20).isActive = true
        
        nextButton.setTitle("–¥–∞–ª—å—à–µ", for: .normal)
        nextButton.backgroundColor = .red
        
        nextButton.addTarget(self, action: #selector(nextButtonAction), for: .touchUpInside)
        
    }
    
    @objc func nextButtonAction() {
        if numberView == viewArray.count-1{
            numberView = 0
        }else{
            numberView += 1
        }
        textLabel.removeFromSuperview()
        currentView.removeFromSuperview()
        currentView = viewArray[numberView]
        textLabel.text = textArray[numberView]
        addSphere()
        addLabel()
        if numberView == viewArray.count-1{
            addAnglDistLabels()
        }
    }
    
    func addAnglDistLabels() {
        
        
        currentView.addSubview(helpAngleViewLeft)
        helpAngleViewLeft.translatesAutoresizingMaskIntoConstraints = false
        helpAngleViewLeft.leftAnchor.constraint(equalTo: currentView.leftAnchor).isActive = true
        helpAngleViewLeft.bottomAnchor.constraint(equalTo: currentView.bottomAnchor).isActive = true
        helpAngleViewLeft.widthAnchor.constraint(equalTo: currentView.widthAnchor, multiplier: 3/20).isActive = true
        helpAngleViewLeft.heightAnchor.constraint(equalTo: currentView.heightAnchor, multiplier: 1/4).isActive = true
        helpAngleViewLeft.backgroundColor = .clear
        
        currentView.addSubview(angleLabel)
        angleLabel.translatesAutoresizingMaskIntoConstraints = false
        angleLabel.leftAnchor.constraint(equalTo: helpAngleViewLeft.rightAnchor).isActive = true
        angleLabel.bottomAnchor.constraint(equalTo: helpAngleViewLeft.topAnchor).isActive = true
        angleLabel.widthAnchor.constraint(equalTo: currentView.widthAnchor, multiplier: 4/20).isActive = true
        angleLabel.heightAnchor.constraint(equalTo: currentView.widthAnchor, multiplier: 1/20).isActive = true
        
        angleLabel.backgroundColor = .clear
        angleLabel.text = "ùõÇ = 0¬∞ 1‚Ä≤"
        
        currentView.addSubview(helpAngleViewBottom)
        helpAngleViewBottom.translatesAutoresizingMaskIntoConstraints = false
        helpAngleViewBottom.rightAnchor.constraint(equalTo: currentView.rightAnchor).isActive = true
        helpAngleViewBottom.bottomAnchor.constraint(equalTo: currentView.bottomAnchor).isActive = true
        helpAngleViewBottom.widthAnchor.constraint(equalTo: currentView.widthAnchor, multiplier: 6/20).isActive = true
        helpAngleViewBottom.heightAnchor.constraint(equalTo: currentView.heightAnchor, multiplier: 7/20).isActive = true
        helpAngleViewBottom.backgroundColor = .clear
        
        currentView.addSubview(distLabel)
        distLabel.translatesAutoresizingMaskIntoConstraints = false
        distLabel.leftAnchor.constraint(equalTo: helpAngleViewBottom.leftAnchor).isActive = true
        distLabel.bottomAnchor.constraint(equalTo: helpAngleViewBottom.topAnchor).isActive = true
        distLabel.widthAnchor.constraint(equalTo: currentView.widthAnchor, multiplier: 4/20).isActive = true
        distLabel.heightAnchor.constraint(equalTo: currentView.widthAnchor, multiplier: 1/20).isActive = true
        
        distLabel.backgroundColor = .clear
        distLabel.text = "5 m."
        distLabel.textAlignment = .center
        
        currentView.addSubview(helpRazrView)
        helpRazrView.translatesAutoresizingMaskIntoConstraints = false
        helpRazrView.leftAnchor.constraint(equalTo: currentView.leftAnchor).isActive = true
        helpRazrView.bottomAnchor.constraint(equalTo: currentView.bottomAnchor).isActive = true
        helpRazrView.widthAnchor.constraint(equalTo: currentView.widthAnchor, multiplier: 3/20).isActive = true
        helpRazrView.heightAnchor.constraint(equalTo: currentView.heightAnchor, multiplier: 1/2).isActive = true
        helpRazrView.backgroundColor = .clear
        
        currentView.addSubview(razrLabel)
        razrLabel.translatesAutoresizingMaskIntoConstraints = false
        razrLabel.leftAnchor.constraint(equalTo: helpRazrView.rightAnchor).isActive = true
        razrLabel.bottomAnchor.constraint(equalTo: helpRazrView.topAnchor).isActive = true
        razrLabel.widthAnchor.constraint(equalTo: currentView.widthAnchor, multiplier: 4/20).isActive = true
        razrLabel.heightAnchor.constraint(equalTo: currentView.widthAnchor, multiplier: 1/20).isActive = true
        
        razrLabel.backgroundColor = .clear
        razrLabel.text = "‚âà 1.4 mm."
        razrLabel.textAlignment = .center
    }
    
}

